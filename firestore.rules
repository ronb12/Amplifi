rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read their own data and public user data
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Posts are readable by all authenticated users, writable by author
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == resource.data.authorId;
      allow update: if request.auth != null && request.auth.uid == resource.data.authorId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }
    
    // Comments are readable by all authenticated users, writable by author
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == resource.data.authorId;
      allow update: if request.auth != null && request.auth.uid == resource.data.authorId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }
    
    // Conversations are readable/writable by participants
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;
    }
    
    // Messages are readable/writable by conversation participants
    match /messages/{messageId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants;
    }
    
    // Likes are readable by all authenticated users, writable by the user who liked
    match /likes/{likeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Follows are readable by all authenticated users, writable by the follower
    match /follows/{followId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == resource.data.followerId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.followerId;
    }
    
    // Earnings are only readable/writable by the user themselves
    match /earnings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Tips are readable by recipient, writable by sender
    match /tips/{tipId} {
      allow read: if request.auth != null && (request.auth.uid == resource.data.recipientId || request.auth.uid == resource.data.senderId);
      allow create: if request.auth != null && request.auth.uid == resource.data.senderId;
    }
    
    // Reports are readable by admins, writable by authenticated users
    match /reports/{reportId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      allow create: if request.auth != null;
    }
  }
} 