name: Deploy to Firebase

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Firebase CLI
      run: npm install -g firebase-tools@latest
    
    - name: Verify Firebase config
      run: |
        if [ -f "firebase.json" ]; then
          echo "✅ Firebase config found"
          cat firebase.json
        else
          echo "❌ Firebase config missing"
          exit 1
        fi
    
    - name: Deploy to Firebase Hosting
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
        projectId: amplifi-a54d9
        channelId: live
      env:
        FIREBASE_CLI_EXPERIMENTS: webframeworks
    
    - name: Verify deployment
      run: |
        echo "✅ Deployment completed successfully"
        echo "🌐 Live URL: https://amplifi-a54d9.web.app"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Security Scan
      run: |
        echo "🔍 Running security scan..."
        
        # Check for actual secrets (not public client-side keys)
        if grep -r "sk_test_" . --exclude-dir=.git --exclude-dir=node_modules 2>/dev/null || \
           grep -r "sk_live_" . --exclude-dir=.git --exclude-dir=node_modules 2>/dev/null || \
           grep -r "firebase-adminsdk" . --exclude-dir=.git --exclude-dir=node_modules 2>/dev/null; then
          echo "❌ Actual secrets found in repository!"
          exit 1
        else
          echo "✅ No actual secrets found - only safe public keys detected"
        fi
    
    - name: Validate Firebase Config
      run: |
        echo "🔍 Validating Firebase configuration..."
        
        if [ -f "public/config/firebaseConfig.js" ]; then
          if grep -q "AIzaSy" public/config/firebaseConfig.js; then
            echo "✅ Firebase API key found (safe public client-side key)"
          else
            echo "❌ Firebase API key missing or incorrect"
            exit 1
          fi
        else
          echo "❌ Firebase config file not found"
          exit 1
        fi
    
    - name: Check for sensitive files
      run: |
        echo "🔍 Checking for sensitive files..."
        
        # Check for common sensitive file patterns
        if find . -name "*.key" -o -name "*.pem" -o -name "serviceAccountKey.json" -o -name "firebase-adminsdk*.json" | grep -v node_modules | grep -v .git; then
          echo "❌ Sensitive files found in repository!"
          exit 1
        else
          echo "✅ No sensitive files found"
        fi
    
    - name: Validate HTML files
      run: |
        echo "🔍 Validating HTML files..."
        
        # Check if all required HTML files exist
        required_files=("index.html" "feed.html" "moments.html" "trending.html" "live.html" "upload.html" "profile.html" "library.html" "search.html")
        
        for file in "${required_files[@]}"; do
          if [ -f "public/$file" ]; then
            echo "✅ Found: $file"
          else
            echo "❌ Missing: $file"
            exit 1
          fi
        done
        
        echo "✅ All required HTML files present"

  build-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        if [ -f "package.json" ]; then
          npm install
        else
          echo "No package.json found, skipping npm install"
        fi
    
    - name: Check file structure
      run: |
        echo "🔍 Checking project structure..."
        
        # Check essential directories
        if [ -d "public" ]; then
          echo "✅ Public directory exists"
        else
          echo "❌ Public directory missing"
          exit 1
        fi
        
        if [ -d "public/assets" ]; then
          echo "✅ Assets directory exists"
        else
          echo "❌ Assets directory missing"
          exit 1
        fi
        
        if [ -d "public/assets/css" ]; then
          echo "✅ CSS directory exists"
        else
          echo "❌ CSS directory missing"
          exit 1
        fi
        
        if [ -d "public/assets/js" ]; then
          echo "✅ JavaScript directory exists"
        else
          echo "❌ JavaScript directory missing"
          exit 1
        fi
    
    - name: Validate CSS files
      run: |
        echo "🔍 Validating CSS files..."
        
        if [ -f "public/assets/css/youtube-style.css" ]; then
          echo "✅ Main CSS file found"
          # Check if CSS file has content
          if [ -s "public/assets/css/youtube-style.css" ]; then
            echo "✅ CSS file has content"
          else
            echo "❌ CSS file is empty"
            exit 1
          fi
        else
          echo "❌ Main CSS file missing"
          exit 1
        fi
    
    - name: Validate JavaScript files
      run: |
        echo "🔍 Validating JavaScript files..."
        
        # Check for essential JS files
        js_files=("app.js" "core-features.js" "pexels-service.js" "image-loader.js")
        
        for file in "${js_files[@]}"; do
          if [ -f "public/assets/js/$file" ]; then
            echo "✅ Found: $file"
          else
            echo "❌ Missing: $file"
            exit 1
          fi
        done
        
        echo "✅ All essential JavaScript files present"