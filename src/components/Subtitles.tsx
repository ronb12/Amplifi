import React, { useState } from 'react';
import { FiType, FiDownload, FiUpload, FiEdit3, FiPlus, FiX } from 'react-icons/fi';

export interface Subtitle {
  id: string;
  language: string;
  label: string;
  isDefault: boolean;
  isAutoGenerated: boolean;
  tracks: SubtitleTrack[];
}

export interface SubtitleTrack {
  id: string;
  startTime: number; // seconds
  endTime: number; // seconds
  text: string;
}

interface SubtitlesProps {
  subtitles: Subtitle[];
  currentLanguage: string;
  onLanguageChange: (language: string) => void;
  onSubtitleEdit?: (subtitle: Subtitle) => void;
  onSubtitleDelete?: (subtitleId: string) => void;
  onSubtitleAdd?: (subtitle: Omit<Subtitle, 'id'>) => void;
  onTrackEdit?: (subtitleId: string, track: SubtitleTrack) => void;
  onTrackDelete?: (subtitleId: string, trackId: string) => void;
  onTrackAdd?: (subtitleId: string, track: Omit<SubtitleTrack, 'id'>) => void;
  isEditable?: boolean;
}

const Subtitles: React.FC<SubtitlesProps> = ({
  subtitles,
  currentLanguage,
  onLanguageChange,
  onSubtitleEdit,
  onSubtitleDelete,
  onSubtitleAdd,
  onTrackEdit,
  onTrackDelete,
  onTrackAdd,
  isEditable = false
}) => {
  const [isAddingSubtitle, setIsAddingSubtitle] = useState(false);
  const [isAddingTrack, setIsAddingTrack] = useState<string | null>(null);
  const [newSubtitle, setNewSubtitle] = useState({
    language: '',
    label: '',
    isDefault: false,
    isAutoGenerated: false,
    tracks: []
  });
  const [newTrack, setNewTrack] = useState({
    startTime: 0,
    endTime: 0,
    text: ''
  });

  const languages = [
    { code: 'en', name: 'English' },
    { code: 'es', name: 'Spanish' },
    { code: 'fr', name: 'French' },
    { code: 'de', name: 'German' },
    { code: 'it', name: 'Italian' },
    { code: 'pt', name: 'Portuguese' },
    { code: 'ru', name: 'Russian' },
    { code: 'ja', name: 'Japanese' },
    { code: 'ko', name: 'Korean' },
    { code: 'zh', name: 'Chinese' }
  ];

  const formatTime = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = Math.floor(seconds % 60);
    const ms = Math.floor((seconds % 1) * 1000);

    if (hours > 0) {
      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')},${ms.toString().padStart(3, '0')}`;
    }
    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')},${ms.toString().padStart(3, '0')}`;
  };

  const parseTime = (timeString: string) => {
    const parts = timeString.split(',');
    const timeParts = parts[0].split(':');
    const seconds = parseInt(timeParts[0]) * 60 + parseInt(timeParts[1]) + parseInt(parts[1]) / 1000;
    return seconds;
  };

  const handleAddSubtitle = () => {
    if (newSubtitle.language && newSubtitle.label) {
      onSubtitleAdd?.({
        ...newSubtitle,
        tracks: []
      });
      
      setNewSubtitle({ language: '', label: '', isDefault: false, isAutoGenerated: false, tracks: [] });
      setIsAddingSubtitle(false);
    }
  };

  const handleAddTrack = (subtitleId: string) => {
    if (newTrack.text.trim() && newTrack.startTime >= 0 && newTrack.endTime > newTrack.startTime) {
      onTrackAdd?.(subtitleId, {
        startTime: newTrack.startTime,
        endTime: newTrack.endTime,
        text: newTrack.text.trim()
      });
      
      setNewTrack({ startTime: 0, endTime: 0, text: '' });
      setIsAddingTrack(null);
    }
  };

  const handleEditTrack = (subtitleId: string, track: SubtitleTrack) => {
    if (onTrackEdit) {
      onTrackEdit(subtitleId, track);
    }
  };

  const handleDeleteTrack = (subtitleId: string, trackId: string) => {
    if (onTrackDelete) {
      onTrackDelete(subtitleId, trackId);
    }
  };

  const handleSubtitleEdit = (subtitle: Subtitle) => {
    if (onSubtitleEdit) {
      onSubtitleEdit(subtitle);
    }
  };

  const handleSubtitleDelete = (subtitleId: string) => {
    if (onSubtitleDelete) {
      onSubtitleDelete(subtitleId);
    }
  };

  const currentSubtitle = subtitles.find(s => s.language === currentLanguage);

  return (
    <div className="bg-white rounded-lg shadow-sm p-4">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold text-gray-900 flex items-center space-x-2">
          <FiType className="w-5 h-5 text-blue-600" />
          <span>Subtitles & Captions</span>
        </h3>
        
        {isEditable && (
          <button
            onClick={() => setIsAddingSubtitle(true)}
            className="flex items-center space-x-2 px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors"
          >
            <FiPlus className="w-4 h-4" />
            <span>Add Language</span>
          </button>
        )}
      </div>

      {/* Language Selector */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-2">Select Language</label>
        <select
          value={currentLanguage}
          onChange={(e) => onLanguageChange(e.target.value)}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        >
          <option value="">No subtitles</option>
          {subtitles.map(subtitle => (
            <option key={subtitle.language} value={subtitle.language}>
              {languages.find(l => l.code === subtitle.language)?.name || subtitle.language} 
              {subtitle.isDefault && ' (Default)'}
              {subtitle.isAutoGenerated && ' (Auto)'}
            </option>
          ))}
        </select>
      </div>

      {/* Add Subtitle Form */}
      {isAddingSubtitle && (
        <div className="mb-4 p-4 bg-gray-50 rounded-lg">
          <h4 className="text-sm font-medium text-gray-700 mb-3">Add New Language</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            <select
              value={newSubtitle.language}
              onChange={(e) => setNewSubtitle(prev => ({ ...prev, language: e.target.value }))}
              className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">Select language</option>
              {languages.map(lang => (
                <option key={lang.code} value={lang.code}>{lang.name}</option>
              ))}
            </select>
            <input
              type="text"
              placeholder="Label (e.g., English - CC)"
              value={newSubtitle.label}
              onChange={(e) => setNewSubtitle(prev => ({ ...prev, label: e.target.value }))}
              className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div className="flex space-x-3 mt-3">
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={newSubtitle.isDefault}
                onChange={(e) => setNewSubtitle(prev => ({ ...prev, isDefault: e.target.checked }))}
                className="rounded text-blue-600"
              />
              <span className="text-sm text-gray-700">Default language</span>
            </label>
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={newSubtitle.isAutoGenerated}
                onChange={(e) => setNewSubtitle(prev => ({ ...prev, isAutoGenerated: e.target.checked }))}
                className="rounded text-blue-600"
              />
              <span className="text-sm text-gray-700">Auto-generated</span>
            </label>
          </div>
          <div className="flex space-x-2 mt-3">
            <button
              onClick={handleAddSubtitle}
              className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors"
            >
              Add Language
            </button>
            <button
              onClick={() => {
                setIsAddingSubtitle(false);
                setNewSubtitle({ language: '', label: '', isDefault: false, isAutoGenerated: false, tracks: [] });
              }}
              className="px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 rounded-lg text-sm transition-colors"
            >
              Cancel
            </button>
          </div>
        </div>
      )}

      {/* Current Subtitle Display */}
      {currentSubtitle && (
        <div className="mb-4">
          <div className="flex items-center justify-between mb-3">
            <h4 className="text-sm font-medium text-gray-700">
              {languages.find(l => l.code === currentSubtitle.language)?.name} Subtitles
              {currentSubtitle.isDefault && ' (Default)'}
              {currentSubtitle.isAutoGenerated && ' (Auto-generated)'}
            </h4>
            
            {isEditable && (
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => setIsAddingTrack(currentSubtitle.id)}
                  className="flex items-center space-x-1 px-2 py-1 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded text-xs transition-colors"
                >
                  <FiPlus className="w-3 h-3" />
                  <span>Add Track</span>
                </button>
                <button
                  onClick={() => handleSubtitleEdit(currentSubtitle)}
                  className="p-1 text-gray-400 hover:text-blue-600 transition-colors"
                  title="Edit subtitle"
                >
                  <FiEdit3 className="w-4 h-4" />
                </button>
                <button
                  onClick={() => handleSubtitleDelete(currentSubtitle.id)}
                  className="p-1 text-gray-400 hover:text-red-600 transition-colors"
                  title="Delete subtitle"
                >
                  <FiX className="w-4 h-4" />
                </button>
              </div>
            )}
          </div>

          {/* Add Track Form */}
          {isAddingTrack === currentSubtitle.id && (
            <div className="mb-4 p-3 bg-blue-50 rounded-lg">
              <h5 className="text-sm font-medium text-gray-700 mb-2">Add New Track</h5>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
                <input
                  type="number"
                  step="0.1"
                  placeholder="Start time (seconds)"
                  value={newTrack.startTime}
                  onChange={(e) => setNewTrack(prev => ({ ...prev, startTime: parseFloat(e.target.value) || 0 }))}
                  className="px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-blue-500"
                />
                <input
                  type="number"
                  step="0.1"
                  placeholder="End time (seconds)"
                  value={newTrack.endTime}
                  onChange={(e) => setNewTrack(prev => ({ ...prev, endTime: parseFloat(e.target.value) || 0 }))}
                  className="px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-blue-500"
                />
                <input
                  type="text"
                  placeholder="Subtitle text"
                  value={newTrack.text}
                  onChange={(e) => setNewTrack(prev => ({ ...prev, text: e.target.value }))}
                  className="px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-blue-500"
                />
              </div>
              <div className="flex space-x-2 mt-2">
                <button
                  onClick={() => handleAddTrack(currentSubtitle.id)}
                  className="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-xs transition-colors"
                >
                  Add Track
                </button>
                <button
                  onClick={() => {
                    setIsAddingTrack(null);
                    setNewTrack({ startTime: 0, endTime: 0, text: '' });
                  }}
                  className="px-3 py-1 bg-gray-300 hover:bg-gray-400 text-gray-700 rounded text-xs transition-colors"
                >
                  Cancel
                </button>
              </div>
            </div>
          )}

          {/* Tracks List */}
          <div className="space-y-2 max-h-64 overflow-y-auto">
            {currentSubtitle.tracks.length === 0 ? (
              <p className="text-gray-500 text-center py-4">No subtitle tracks available</p>
            ) : (
              currentSubtitle.tracks
                .sort((a, b) => a.startTime - b.startTime)
                .map((track, index) => (
                  <div
                    key={track.id}
                    className="flex items-center justify-between p-2 bg-gray-50 rounded border"
                  >
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 text-xs text-gray-600 mb-1">
                        <span>#{index + 1}</span>
                        <span>{formatTime(track.startTime)} → {formatTime(track.endTime)}</span>
                      </div>
                      <p className="text-sm text-gray-900">{track.text}</p>
                    </div>
                    
                    {isEditable && (
                      <div className="flex items-center space-x-1 ml-2">
                        <button
                          onClick={() => handleEditTrack(currentSubtitle.id, track)}
                          className="p-1 text-gray-400 hover:text-blue-600 transition-colors"
                          title="Edit track"
                        >
                          <FiEdit3 className="w-3 h-3" />
                        </button>
                        <button
                          onClick={() => handleDeleteTrack(currentSubtitle.id, track.id)}
                          className="p-1 text-gray-400 hover:text-red-600 transition-colors"
                          title="Delete track"
                        >
                          <FiX className="w-3 h-3" />
                        </button>
                      </div>
                    )}
                  </div>
                ))
            )}
          </div>
        </div>
      )}

      {/* Import/Export Options */}
      {isEditable && currentSubtitle && (
        <div className="border-t pt-4">
          <h4 className="text-sm font-medium text-gray-700 mb-3">Import/Export</h4>
          <div className="flex space-x-2">
            <button className="flex items-center space-x-2 px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm transition-colors">
              <FiUpload className="w-4 h-4" />
              <span>Import SRT</span>
            </button>
            <button className="flex items-center space-x-2 px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg text-sm transition-colors">
              <FiDownload className="w-4 h-4" />
              <span>Export SRT</span>
            </button>
            <button className="flex items-center space-x-2 px-3 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg text-sm transition-colors">
              <FiDownload className="w-4 h-4" />
              <span>Export VTT</span>
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Subtitles;
